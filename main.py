#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cyberpunk RPG Telegram Bot
–ö–∏–±–µ—Ä–ø–∞–Ω–∫ RPG –∏–≥—Ä–∞ —Å –∞–≤—Ç–æ–±–æ—è–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Location
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode

from game_engine import GameEngine
from player import Player
from combat import CombatSystem
from items import ItemManager
from locations import LocationManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CyberpunkRPGBot:
    def __init__(self):
        self.config = self.load_config()
        self.game_engine = GameEngine()
        self.combat_system = CombatSystem()
        self.item_manager = ItemManager()
        self.location_manager = LocationManager()
        self.players: Dict[int, Player] = {}
        
    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        if user_id not in self.players:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            player = Player(user_id, username)
            self.players[user_id] = player
            welcome_msg = f"""
üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cyberpunk RPG!* üéÆ

üåÉ *–ú–∏—Ä –±—É–¥—É—â–µ–≥–æ –∂–¥–µ—Ç —Ç–µ–±—è, –∫–∏–±–µ—Ä–ø–∞–Ω–∫!*

üë§ **–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂:**
‚Ä¢ –ò–º—è: {username}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {player.level}
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}/{player.max_health}
‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {player.credits}
‚Ä¢ –û–ø—ã—Ç: {player.experience}/{player.experience_to_next_level}

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
‚Ä¢ /combat - –ê–≤—Ç–æ–±–æ–∏
‚Ä¢ /search - –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ /inventory - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
‚Ä¢ /shop - –ú–∞–≥–∞–∑–∏–Ω
‚Ä¢ /help - –ü–æ–º–æ—â—å

*–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º –≤ –Ω–µ–æ–Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ?* üåÜ
            """
        else:
            player = self.players[user_id]
            welcome_msg = f"""
üéÆ *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ Cyberpunk RPG!* üéÆ

üë§ **–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂:**
‚Ä¢ –ò–º—è: {username}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {player.level}
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}/{player.max_health}
‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {player.credits}
‚Ä¢ –û–ø—ã—Ç: {player.experience}/{player.experience_to_next_level}

*–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?* üöÄ
            """
        
        keyboard = [
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("‚öîÔ∏è –ê–≤—Ç–æ–±–æ–∏", callback_data="combat")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data="search")],
            [InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        user_id = update.effective_user.id
        if user_id not in self.players:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        player = self.players[user_id]
        profile_msg = f"""
üë§ *–ü–†–û–§–ò–õ–¨ –ü–ï–†–°–û–ù–ê–ñ–ê* üë§

üåÉ **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {player.username}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {player.level}
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}/{player.max_health}
‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {player.credits}
‚Ä¢ –û–ø—ã—Ç: {player.experience}/{player.experience_to_next_level}

‚öîÔ∏è **–ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –ê—Ç–∞–∫–∞: {player.attack}
‚Ä¢ –ó–∞—â–∏—Ç–∞: {player.defense}
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {player.speed}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω: {player.critical_damage}%

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
‚Ä¢ –ü–æ–±–µ–¥—ã –≤ –±–æ—è—Ö: {player.combat_wins}
‚Ä¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {player.items_found}
‚Ä¢ –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {player.get_playtime()}

*–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º!* üí™
        """
        
        keyboard = [
            [InlineKeyboardButton("‚öîÔ∏è –ê–≤—Ç–æ–±–æ–∏", callback_data="combat")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data="search")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            profile_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def combat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /combat - –∞–≤—Ç–æ–±–æ–∏"""
        user_id = update.effective_user.id
        if user_id not in self.players:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        player = self.players[user_id]
        
        if not player.can_combat():
            cooldown = player.get_combat_cooldown()
            await update.message.reply_text(f"‚è∞ –ü–æ–¥–æ–∂–¥–∏ {cooldown} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–æ–µ–º!")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        opponent = self.combat_system.find_opponent(player)
        if not opponent:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            return
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –±–æ–π
        battle_result = self.combat_system.execute_battle(player, opponent)
        
        battle_msg = f"""
‚öîÔ∏è *–ê–í–¢–û–ë–û–ô –ó–ê–í–ï–†–®–ï–ù!* ‚öîÔ∏è

üë§ **–¢—ã:** {player.username} (–£—Ä–æ–≤–µ–Ω—å {player.level})
üëπ **–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫:** {opponent.name} (–£—Ä–æ–≤–µ–Ω—å {opponent.level})

üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è:**
{battle_result['description']}

üí• **–£—Ä–æ–Ω:**
‚Ä¢ –¢—ã –Ω–∞–Ω–µ—Å: {battle_result['player_damage']}
‚Ä¢ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–Ω–µ—Å: {battle_result['opponent_damage']}

üèÜ **–ù–∞–≥—Ä–∞–¥—ã:**
‚Ä¢ –û–ø—ã—Ç: +{battle_result['experience_gained']}
‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: +{battle_result['credits_gained']}
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}/{player.max_health}

*{battle_result['message']}*
        """
        
        keyboard = [
            [InlineKeyboardButton("‚öîÔ∏è –ï—â–µ –±–æ–π", callback_data="combat")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            battle_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        if user_id not in self.players:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        player = self.players[user_id]
        
        if not player.can_search():
            cooldown = player.get_search_cooldown()
            await update.message.reply_text(f"‚è∞ –ü–æ–¥–æ–∂–¥–∏ {cooldown} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
        if not context.user_data.get('last_location'):
            await update.message.reply_text(
                "üìç –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π /search —Å–Ω–æ–≤–∞."
            )
            return
        
        location = context.user_data['last_location']
        found_items = self.location_manager.search_items(location, player)
        
        if not found_items:
            search_msg = """
üîç *–ü–û–ò–°–ö –ü–†–ï–î–ú–ï–¢–û–í* üîç

üìç **–õ–æ–∫–∞—Ü–∏—è:** –¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
‚ùå **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

*–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏!*
            """
        else:
            items_text = "\n".join([f"‚Ä¢ {item.name} ({item.rarity})" for item in found_items])
            search_msg = f"""
üîç *–ü–û–ò–°–ö –ü–†–ï–î–ú–ï–¢–û–í* üîç

üìç **–õ–æ–∫–∞—Ü–∏—è:** –¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
‚úÖ **–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:** {len(found_items)}

üéÅ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**
{items_text}

*–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!*
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–≥—Ä–æ–∫—É
            for item in found_items:
                player.add_item(item)
                player.items_found += 1
        
        keyboard = [
            [InlineKeyboardButton("üîç –ï—â–µ –ø–æ–∏—Å–∫", callback_data="search")],
            [InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            search_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        location = update.message.location
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['last_location'] = {
            'latitude': location.latitude,
            'longitude': location.longitude,
            'timestamp': datetime.now()
        }
        
        await update.message.reply_text(
            "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /search"
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "profile":
            await self.profile_command(update, context)
        elif query.data == "combat":
            await self.combat_command(update, context)
        elif query.data == "search":
            await self.search_command(update, context)
        elif query.data == "inventory":
            await self.inventory_command(update, context)
        elif query.data == "shop":
            await self.shop_command(update, context)
        elif query.data == "main_menu":
            await self.start_command(update, context)
    
    async def inventory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /inventory - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
        user_id = update.effective_user.id
        if user_id not in self.players:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        player = self.players[user_id]
        
        if not player.inventory:
            inventory_msg = """
üéí *–ò–ù–í–ï–ù–¢–ê–†–¨* üéí

‚ùå **–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!**

*–û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /search –∏–ª–∏ –ø–æ–∫—É–ø–∞–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ!*
            """
        else:
            items_text = "\n".join([f"‚Ä¢ {item.name} ({item.rarity}) - {item.description}" for item in player.inventory])
            inventory_msg = f"""
üéí *–ò–ù–í–ï–ù–¢–ê–†–¨* üéí

üì¶ **–ü—Ä–µ–¥–º–µ—Ç–æ–≤:** {len(player.inventory)}

üéÅ **–¢–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:**
{items_text}

*–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!*
            """
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data="search")],
            [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            inventory_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def shop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /shop - –º–∞–≥–∞–∑–∏–Ω"""
        user_id = update.effective_user.id
        if user_id not in self.players:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        player = self.players[user_id]
        
        shop_items = self.item_manager.get_shop_items()
        shop_msg = f"""
üè™ *–ú–ê–ì–ê–ó–ò–ù –ö–ò–ë–ï–†–ü–ê–ù–ö* üè™

üí∞ **–¢–≤–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã:** {player.credits}

üõí **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**
        """
        
        for item in shop_items:
            shop_msg += f"\n‚Ä¢ {item.name} ({item.rarity}) - {item.cost} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            shop_msg += f"\n  {item.description}"
        
        shop_msg += "\n\n*–ò—Å–ø–æ–ª—å–∑—É–π /buy <–Ω–∞–∑–≤–∞–Ω–∏–µ> –¥–ª—è –ø–æ–∫—É–ø–∫–∏!*"
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data="search")],
            [InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            shop_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å"""
        help_msg = """
üéÆ *CYBERPUNK RPG - –ü–û–ú–û–©–¨* üéÆ

üåÉ **–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:**
–ö–∏–±–µ—Ä–ø–∞–Ω–∫ RPG –∏–≥—Ä–∞ –≤ –º–∏—Ä–µ –±—É–¥—É—â–µ–≥–æ —Å –∞–≤—Ç–æ–±–æ—è–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
‚Ä¢ /profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
‚Ä¢ /combat - –ê–≤—Ç–æ–±–æ–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
‚Ä¢ /search - –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
‚Ä¢ /inventory - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
‚Ä¢ /shop - –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìç **–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:**
–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –ª–æ–∫–∞—Ü–∏–µ–π, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π /search

‚öîÔ∏è **–ê–≤—Ç–æ–±–æ–∏:**
–°—Ä–∞–∂–∞–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏, –ø–æ–ª—É—á–∞–π –æ–ø—ã—Ç –∏ –∫—Ä–µ–¥–∏—Ç—ã

üéÅ **–ü—Ä–µ–¥–º–µ—Ç—ã:**
–ù–∞—Ö–æ–¥–∏ –∏ –ø–æ–∫—É–ø–∞–π –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

*–£–¥–∞—á–∏ –≤ –Ω–µ–æ–Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ!* üåÜ
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="main_menu")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config['telegram_bot_token']).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("profile", self.profile_command))
        application.add_handler(CommandHandler("combat", self.combat_command))
        application.add_handler(CommandHandler("search", self.search_command))
        application.add_handler(CommandHandler("inventory", self.inventory_command))
        application.add_handler(CommandHandler("shop", self.shop_command))
        application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.LOCATION, self.handle_location))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Cyberpunk RPG Bot –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()

if __name__ == "__main__":
    bot = CyberpunkRPGBot()
    bot.run()
